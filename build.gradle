plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id "maven-publish"
    id 'java-gradle-plugin'
    id "com.gradle.plugin-publish" version "0.11.0"
}

group 'io.github.fudge'
version project.version
archivesBaseName = "forgedflowerloom"

repositories {
    mavenCentral()
    maven { url = "https://maven.fabricmc.net/" }
    jcenter()
}



dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation "net.fabricmc:fabric-loom:0.4.24"
    implementation 'io.github.fudge:forgedflower:1.7.0'
    implementation('org.jetbrains:intellij-fernflower:1.2.0.15')
    implementation "net.fabricmc:tiny-mappings-parser:0.2.2.14"
}


compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

java {
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            archivesBaseName = "forgedflowerloom"
        }
    }
}

gradlePlugin {
    plugins {
        ffLoomPlugin {
            id = 'com.github.fudge.forgedflowerloom'
            implementationClass = 'fudge.FFLoomPlugin'
        }
    }
}

pluginBundle {
    website = 'https://github.com/natanfudge/ForgedFlowerLoom'
    vcsUrl = 'https://github.com/natanfudge/ForgedFlowerLoom'
    description = 'Provides the ForgedFlower decompiler to Fabric-Loom environments'
    tags = ['fabric', 'decompilers','fabric-loom']

    plugins {
        ffLoomPlugin {
            // id is captured from java-gradle-plugin configuration
            displayName = 'ForgedFlowerLoom'
        }
    }
}

//bintray {
//    user = project.hasProperty('bintray_user') ? project.property('bintray_user') : ""
//    key = project.hasProperty('bintray_api_key') ? project.property('bintray_api_key') : ""
//    publications = ["mavenJava"]
//    publish = true //[Default: false] Whether version should be auto published after an upload
//    pkg {
//        repo = "libs"
//        name = "ForgedFlowerLoom"
//        licenses = ["MIT"]
//        version {
//            name = project.version
//            released = new Date()
//        }
//    }
//
//}


task updateTemplate(type: Copy) {
    group = "template"
    description = "Switches out variables like \$total_version in .template.md files, and copies the results into .md files."
    from(rootDir)
    include("**/*.template.md")
    filesMatching("**/*.template.md") {
        def extensionLength = ".template.md".length()

        name = sourceName.substring(0, sourceName.length() - extensionLength) + ".md"
        expand("version": project.version)
    }
    destinationDir = rootDir
}

tasks.publishPlugins.dependsOn(tasks.updateTemplate)